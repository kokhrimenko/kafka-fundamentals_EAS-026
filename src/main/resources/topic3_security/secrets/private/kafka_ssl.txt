keytool -list -v -keystore broker.keystore.jks -alias caroot 																			list of certificates by alias
keytool -trustcacerts -keystore kafka-rest.keystore.jks -storepass secret -importcert -alias schema-registry -file schema-registry.crt	import schema-registry certificate to kafka-rest keystore
keytool -export -storepass secret -alias caroot -keystore broker.keystore.jks -file root.crt 											export root CA from keystore


curl -v -X GET --cert /etc/kafka/secrets/luxoft-eas-026-ca.pem --key /etc/kafka/secrets/luxoft-eas-026-ca.key --tlsv1.2 --cacert /etc/kafka/secrets/hema-registry.crt https://schema-registry:8081/subjects/
																																	how to connect to schema-registry

curl -v -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '{"schema": "{\"type\": \"string\"}"}' --cert /etc/kafka/secrets/luxoft-eas-026-ca.pem --key /etc/kafka/secrets/luxoft-eas-026-ca.key --tlsv1.2 --cacert /etc/kafka/secrets/schema-registry.crt https://schema-registry:8081/subjects/Kafka-key/versions

keytool -keystore schema-registry.keystore.jks -storepass secret -exportcert -alias schema-registry -rfc > schema-registry.crt		export certificate form keystore



curl -v -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '{"schema": "{\"type\": \"string\"}"}' --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2 https://schema-registry:8081/subjects/Kafka-key/versions -k


curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '{"schema": "{\"type\":\"record\",\"name\":\"TestItem\",\"namespace\":\"org.luxoft\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}"}' --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2  https://schema-registry:8081/subjects/topicwithschemaregistry-value/versions -k

curl -X PUT -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '{"compatibility": "FULL"}' --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2 http://localhost:8081/config/topicwithschemaregistry-value -k

curl -X GET --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2 https://schema-registry:8081/schemas/ids/2/versions -k

curl -X GET --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2 https://schema-registry:8081/subjects/topicwithschemaregistry-value/versions/1/schema -k


steps:
1 kafka-topics --create --bootstrap-server broker:9092 --topic topicwithschemaregistry --replication-factor 1 --partitions 1 --command-config /etc/kafka/kafka.properties
2 kafka-topics --list --bootstrap-server broker:9092 --command-config /etc/kafka/kafka.properties
3 curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '{"schema": "{\"type\":\"record\",\"name\":\"TestItem\",\"namespace\":\"org.luxoft\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}"}' --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2  https://schema-registry:8081/subjects/topicwithschemaregistry-value/versions -k
4 curl -X PUT -H "Content-Type: application/vnd.schemaregistry.v1+json" --data '{"compatibility": "FULL"}' --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2 https://schema-registry:8081/config/topicwithschemaregistry-value -k

5 curl -X GET --cert /etc/kafka/secrets/private/luxoft-eas-026-ca.crt --key /etc/kafka/secrets/private/luxoft-eas-026-ca.key --tlsv1.2 https://schema-registry:8081/subjects/topicwithschemaregistry-value/versions/1 -k - get available versions





mysql -uroot -pmysql;
CREATE DATABASE IF NOT EXISTS kafka_db;
curl -X PUT -H "Content-Type: application/json" --data '@connect-jdbc-sink.json' http://localhost:8083/connectors/jdbc-sink-connector/config
kafka-console-producer --bootstrap-server kafka:9092 --topic kafka_connect_jdbc_sink --property parse.key=true --property key.separator=;

kafka-avro-console-producer --bootstrap-server kafka:9092 --topic kafka_connect_jdbc_sink --property value.schema='{"type":"record","name":"myrecord","fields":[{"name":"count","type":"int"}]}' --property schema.registry.url=http://schema-registry:8081
kafka-console-producer --bootstrap-server kafka:9092 --topic kafka_connect_jdbc_sink --property value.schema='{"type":"record","name":"myvalue","fields":[{"name":"count","type":"int"}]}' --property schema.registry.url=http://schemaregistry:8081  --property key.schema='{"type":"record","name":"mykey","fields":[{"name":"id","type":"int"}]}' --property key.separator=;



{"schema": {"type": "struct","fields": [{"type": "int32","optional": false,"field": "count"}]},"payload": {"count": 100}}


CREATE TABLE IF NOT EXISTS kafka_connect_jdbc_source (`col` VARCHAR(16) NOT NULL, `update_ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP); 